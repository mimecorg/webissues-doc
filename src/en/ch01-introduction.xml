<chapter id="webissues.intro">
  <title>Introduction</title>

  <para>This chapter provides the basics of issues tracking and team collaboration. It also describes the organization of data in the WebIssues system and the life cycle of example issues. Both beginners and advanced users should read it.</para>

  <sect1 id="webissues.intro.collaboration">
    <title>Issue tracking and team collaboration</title>

    <para>Nowadays, information management and communication is the key to success in many areas. Computers provide a large improvement in the collection of information, its retrieval and transfer. There is a very large number of programs that facilitate communication, collaboration and data storage. Their diversity causes, however, that effective management of information  and team collaboration is not an easy task.</para>

    <para>The basic form of communication, that is email, is most flexible and has the most uses, but it's difficult to catalog and search. Where is the invoice sent last week? Which version of the contract was finally approved? Also tracking the status of issues requires additional work. Has the task, which I commissioned to an employee yesterday, already been completed​​? Has the problem reported last week by a customer been resolved?</para>

    <para>One of the solutions to these problems is to create a list of things to do and to assign them different attributes: due date, priority, status. You can use a simple spreadsheet to do this, but if many people will need to modify it at the same time, the work will become difficult. Not only you won't know who changed what, there is also a risk that people will overwrite one another's previous changes. Furthermore, to discuss various issues, or upload associated files, you will still have to use other forms of communication, such as email.</para>

    <para>There are also a number of programs designed for specific uses. There are, for example, programs which facilitate tracking errors (or <quote>bugs</quote>) in software development. They allow registering bugs, assigning attributes, discussing and adding attachments. They also offer many capabilities for searching and browsing the history of individual errors. However, such solutions are usually not very versatile. There are systems for tracking bugs, others for managing tasks, and yet more for handling service requests. Thus, you would have to use several such systems, and you would have to adapt the way you work to the capabilities of these systems, while it should be the other way round.</para>

    <para>The WebIssues system offers much greater possibilities of customization than other similar programs. It allows tracking issues, bugs, tasks, requests and any other information with the same flexibility as a spreadsheet, where you can freely add and modify columns. At the same time, the system allows many people to work at the same time, and it stores and publishes the full history of changes, controls the permissions of individuals for different areas of information, and also makes it possile to freely discuss and exchange information about individual issues and to attach any files to them.</para>

    <para>In the simplest case, you can use the system WebIssues as a discussion forum or mailing list, where individuals exchange information on various subjects. On the other hand, you can use it as a shared database in which individual elements (rows) may have several attributes (columns) of various types, can be searched by various criteria, or printed in form of reports. You may eventually combine all its advantages to get a consistent environment for storing information and communication in the team.</para>

    <para>Another limitation of traditional issue tracking software is that it's often only accessible via a web browser. When using email, you can use both a web interface (so you can access your mail from anywhere in the world) as well as a program installed on your computer (which provides comfortable user interface, instant search and convenient editing). If the issue tracking system is an important part of your everyday working environment, it should also offer such flexibility. Thus, the WebIssues system provides access by both the browser and a desktop client application (that runs directly on your computer).</para>

  </sect1>

  <sect1 id="webissues.intro.organization">
    <title>Logical organization of data</title>

    <para>In the previous chapter the term <firstterm>issue </firstterm> has been repeatedly used  It's the smallest independent unit of information that appears in the WebIssues system. It's also a very general term; a single issue may represent a bug in the software, a service request, a task, a thread in the discussion, an asset owned by the company, etc.</para>

    <para>Every issue in the system has its own unique and invariant <firstterm>identifies</firstterm>, which makes it possible to unambiguously identify it through its entire life time. An issue also has a name and any number of <firstterm>attributes</firstterm> of different types, analogous to a table in a spreadsheet, in which a single row represents an issue and a column corresponds to an attribute. In the WebIssues system issues of different <firstterm>typów</firstterm> can coexist independently, having different sets of attributes, just like a spreadsheet can contain many tables with different sets of columns.</para>

    <figure>
      <title>A table with issues and attributes</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/ch01-fig01.png" format="PNG"/></imageobject>
      </mediaobject>
    </figure>

    <para>Each issue registered in the system has its own history, arranged chronologically from the time of creation. It contains modifications of values of individual attributes, as well as comments and attached files. This allows you to trace the entire life cycle of the issue, to reproduce its state at any time and to see who and when changed the issue and in what way.</para>

    <figure>
      <title>Issue history with changes, comments and attachments</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/ch01-fig02.png" format="PNG"/></imageobject>
      </mediaobject>
    </figure>

    <para>To maximize the productivity and flexibility, the WebIssues system has no complex system of permissions; it's based on the idea of ​​open collaboration. Therefore, it's best suited for internal use in a trusted group of employees or members of an organization. Everyone can freely create and modify all issues to which they have access. Every change, however, is explicit and remains permanently registered by the system. In addition, removal of issues and other potentially dangerous or irreversible operations require special permissions.</para>

    <para>To make issue management easier, they are logically divided into <firstterm>folders</firstterm>. You can create any number of folders of different types, but a single folder must contain issues of same type. Continuing our analogy, the folder is therefore equivalent to a table in a worksheet. Using folders makes it easy to search for information; for example, you can divide bugs according to modules to which they are related, or version of the software; discussion forums can be divided by topic, and service requests by month in which they were registered.</para>

    <para>Folders in turn are grouped into <firstterm>projects</firstterm>. For each project you can specify a set of people who have access to it and their rights within the project. You can therefore divide the system into areas accessible to different groups of users. Each project can also have its administrator (or several administrators). The administrator of the project has more permissions than an ordinary user; for example, he has the ability to delete issues or move them between folders.</para>

    <figure>
      <title>Projects and folders tree</title>
      <mediaobject>
        <imageobject><imagedata fileref="images/ch01-fig03.png" format="PNG"/></imageobject>
      </mediaobject>
    </figure>

    <para>It's not possible to define permissions at a lower level of detail than an single project. All members of the project have equal access to all information contained in this project and the ability to modify them. However the WebIssues system ensures security against unauthorized access to data by unauthorized persons.</para>

  </sect1>

  <sect1 id="webissues.intro.lifecycle">
    <title>Life cycle of an issue</title>

    <para>To begin with, let's assume that the WebIssues system is used for internal communication between team members, replacing the discussion forums or mailing lists. A folder represents a forum or a list related to a specific topic, and an issue represents a thread of discussion.</para>

    <sect2 id="webissues.intro.lifecycle.forum">
      <title>Simple forum</title>

      <para>John Smith is new employee in your company and just learns to use different programs that he needs for work. One of the accounting programs, Big Finances, will not run and instead displays an incomprehensible error message. Smith logs into the WebIssues system and opens the Help folder. Then he adds a new issue and names it <quote>Problem with Big Finances</quote>. He also creates a comment in which he describes what he was doing when the problem occurred, and finally attaches a screenshot of the error message as an image file.</para>

      <para>Since you are trying to help new employees, you peek to the Help folder on a regular basis. All threads (issues) are by default sorted by date of last modification. What's more, new threads, which you haven't read yet, are marked with a yellow symbol of a closed envelope and with bold font &mdash; just like in many email programs and discussion forums. You open the issue, read the description of the problem and open the attachment.</para>

      <para>This is a fairly common problem &mdash; it's enough to delete one wrong file and the Big Finances program should work again. You add a new comment to the issue, describing the solution. Shortly thereafter, Smith looks back to the Help folder and observes that his issue is marked with a green, closed envelope and bold font. This means that someone else has changed the issue since the time when it was last opened. Smith reads your comment, performs the described steps and runs the program. Then he replies that the solution you proposed helped him solve the problem. Looking through the Help folder again, you soon notice a green envelope; you have just helped someone again, without even leaving your seat.</para>

    </sect2>

    <sect2 id="webissues.intro.lifecycle.service">
      <title>Service requests</title>

      <para>Half a year later the company has grown so much that you are no longer able to help all employees without neglecting your own duties. Worse still the company started using new software, Great Finances, which you don't know so well and you cann't solve all problems by yourself. Regular forums were no longer sufficient, so it was necessary to introduce a virtual service desk.</para>

      <para>Smith has been using the new Great Finances program for some time and he's doing well, but he's just encountered a problem with accounting invoices. Smith logs into the WebIssues system and opens the <quote>Great Finances</quote> folder &mdash; because of the large number of requests, they had to be divided into separate folders associated with these programs. When adding the new issue, in addition to the name, he now also has to fill some additional fields (attributes) &mdash; the type of problem, the name of the module and the version of the program. Then he adds a comment with a detailed description of the problem.</para>

      <para>You continue to regularly peek into the service system, but you mainly deal with assigning new requests to others and you only solve issues related to Big Finances by yourself.</para>

      <para>Since there are a lot of requests in the system, you are now using the <quote>New Requests</quote> view, which displays only those issues that aren't yet assigned to any person. In this view, there is a new request created by Smith. Not even reading the description of the problem, you look only at the type of problem and the name the module and then you start editing the issue. In the <quote>Assigned To</quote> field you browse through the list of members and pick Adam Green, who specializes in accounting invoices. After saving the issue disappears from the New Requests view, since it has already been assigned.</para>

      <para>Adam Green uses the <quote>Active Requests</quote> view, in which he sees only issues assigned to him, and that have the Active status (which is the default for newly created requests). Because he doesn't always have time to keep looking into it, he turned on an additional notification, which informs him through email about new issues in this view. Green needs more information from Smith, so he adds a comment asking for them. Smith sees the issue in the <quote>My Requests</quote> view, containing all active issues, which were created by him &mdash; a green icon, just like before, informs him about all changes to the attributes and new comments.</para>

    </sect2>

    <sect2 id="webissues.intro.lifecycle.workflow">
      <title>Workflow</title>

      <para>In many situations, the life cycle of issues can be even more complex, and many people may be involved in the process. A common example is the life cycle of a bug in the software. It's created by the tester, then it's verified and assigned by the project manager to the appropriate programmer. The programmer fixes the bug, and the tester can either accept the solution and close the bug or reject it and assign it back to the programmer.</para>
        
      <figure>
        <title>Example life cycle of a bug</title>
        <mediaobject>
          <imageobject><imagedata fileref="images/ch01-fig04.png" format="PNG"/></imageobject>
        </mediaobject>
      </figure>

      <para>Such processes in which individual steps involve different people are often called workflows. In some systems, the workflow is defined in a rigid way and either can't be changed at all or can only be slightly modified. Other systems have sophisticated tools for designing a workflow.</para>

      <para>In the WebIssues system the workflow isn't enforced in any way, but it can be very easily modeled by appropriately using attributes (for specifying the current state of the issue and the assigned person), views (for restricting the set of issues to those in a particular state and assigned to the appropriate person) and tracking the status of issues (indicating new and modified issues).</para>

      <para>Persons involved in various stages of the workflow can use different views to focus only on those issues that require their intervention. For example, a programmer is generally  only interested in active bugs assigned to him, but if necessary, he can access all bugs, regardless of their status, for example to find other bugs that could potentially be related to the currently processed one.</para>

      <para>Also the supervisors of the whole process can use views to check the number of active issues or to take appropriate steps when a bug remains unresolved for a long time. In addition, they can use tools for creating reports or export data to another program (such as a spreadsheet) for further analysis.</para>

    </sect2>

  </sect1>

</chapter>
